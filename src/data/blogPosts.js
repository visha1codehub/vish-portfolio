export const blogPosts = [
  {
    id: "post1",
    title: "Building a Web-Based Linux Command Simulator with ShellSpace",
    excerpt: "Dive into the development of ShellSpace, a web-based Linux terminal emulator using ReactJS, Node.js, Xterm.js, and Docker for interactive CLI learning.",
    content: "ShellSpace is a web-based Linux command simulator designed to provide an interactive environment for learning CLI commands. Built with ReactJS for the frontend, Node.js for the backend, and Xterm.js for terminal emulation, it leverages Docker to create isolated containers per session, ensuring a safe and scalable environment. Real-time communication is handled via Socket.IO, and the UI is styled with Tailwind CSS v4 for a modern, responsive design. In this post, I’ll walk through the architecture, challenges, and key technologies used to bring ShellSpace to life.",
    date: "June 20, 2025",
    readTime: "6 min read",
    slug: "/blog/shellspace-linux-simulator",
  },
  {
    id: "post2",
    title: "Creating a Responsive Portfolio with React and Vite",
    excerpt: "Learn how to build a modern, responsive portfolio website using React, Vite, and Tailwind CSS, with features like project filtering and dark/light themes.",
    content: "This post explores the development of my personal portfolio website, built using React and Vite for lightning-fast development and Tailwind CSS for responsive styling. Key features include project filtering, dark/light theme toggling, and smooth scroll animations powered by a custom `useScrollAnimations` hook. Deployed on Render, the portfolio showcases my projects and skills effectively. I’ll share insights on setting up Vite, optimizing performance, and implementing accessible UI components.",
    date: "June 10, 2025",
    readTime: "5 min read",
    slug: "/blog/responsive-portfolio-react-vite",
  },
  {
    id: "post3",
    title: "Real-Time Chat with Django Channels and WebSockets",
    excerpt: "Explore the development of VishChat App, a real-time chat application using Django Channels and WebSockets for seamless messaging and group chats.",
    content: "VishChat App is a real-time chat application built with Django, leveraging Django Channels and WebSockets for instant messaging and group chat functionality. The app includes user authentication, private messaging, and group chat features, styled with HTML, CSS, and JavaScript for a seamless user experience. In this post, I’ll cover the setup of Django Channels, WebSocket integration, and best practices for building real-time applications.",
    date: "June 5, 2025",
    readTime: "5 min read",
    slug: "/blog/vishchat-django-websockets",
  },
  {
    id: "post4",
    title: "Building Robust APIs with Django REST Framework",
    excerpt: "Dive into creating scalable, secure, and maintainable REST APIs using Django REST Framework, with tips on authentication and optimization.",
    content: "Django REST Framework (DRF) is a powerful tool for building scalable and secure APIs. In this post, I share my experience developing APIs for various projects, including authentication mechanisms, serialization, and optimization techniques. With DRF, I’ve integrated 10+ third-party APIs and automated workflows, as seen in my internship at Prutor@IITK. Learn how to structure your API, handle authentication, and ensure performance in production.",
    date: "May 30, 2025",
    readTime: "7 min read",
    slug: "/blog/django-rest-framework-apis",
  },
  {
    id: "post5",
    title: "Integrating Google Calendar API in a Medical Blogging Platform",
    excerpt: "Learn how to integrate Google Calendar API and Google Auth into a Django-based blogging platform for doctors and patients to manage appointments.",
    content: "The Medical Blogpost project is a Django-based platform that allows doctors to post blogs and patients to read and book appointments. By integrating Google Calendar API and Google Auth, the platform enables seamless appointment scheduling. This post covers the setup of Google APIs, authentication workflows, and how to manage calendar events in a Django application, along with lessons learned from building a user-friendly system for healthcare professionals and patients.",
    date: "May 25, 2025",
    readTime: "6 min read",
    slug: "/blog/medical-blogpost-google-api",
  },
];